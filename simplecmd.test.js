const { CommandParser, attach } = require("./index.js")

describe("General Module & Error Handling", () => {
  test("Should error when creating an instance with no prefix", () => {
    expect(() => {new CommandParser({})}).toThrow(Error)
  })
  test("Should have a 'help' command generated by default", () => {
    const cparse = new CommandParser({prefix: "!", commands: [{name: "weather", description: "Gets the current weather.", defaultResponse: "Yes."}]})
    expect(cparse.commands).toEqual(expect.arrayContaining([expect.objectContaining({name: "help", description: "Displays the help message."})]))
  })
  test("Should throw an error when passing in a command with no name, no description, and no function nor defaultResponse", () => {
    expect(() => {new CommandParser({prefix: "!", commands: [{name: "test", defaultResponse: "This is a test."}]})}).toThrow()
  })
})
describe("Basic commands and argument parsing", () => {
  test("Arguments with simple text returning", () => {
    var messageisSent = false
    var content = ""
    function send(text) {
      messageisSent = true
      content = text
    }
    const cparse = new CommandParser({
      prefix: "!",
      commands: [{
        name: "command",
        description: "A testing command!",
        arguments: ["argument1", "argument2", "argument3"],
        function: (message, args) => {
          return {text: args.argument1 + " is having an argument with " + args.argument2 + " for " + args.argument3 + " hours."}
        }
      }]
    })
    const message = {content: '!command "argument 1" argument 2', channel: {send}}
    cparse.parse(message)
    expect(content).toBe("argument 1 is having an argument with argument for 2 hours.")
  })
  test("Dynamic data in defaultResponse", () => {
    var messageisSent = false
    var content = ""
    function send(text) {
      messageisSent = true
      content = text
    }
    const cparse = new CommandParser({
      prefix: "!",
      commands: [{
        name: "command",
        description: "A testing command!",
        defaultResponse: "{{customData.bruhMoments}} bruh moments has occured today!"
      }],
      customData: {
        bruhMoments: 1
      }
    })
    const message = {content: '!command', channel: {send}}
    cparse.parse(message)
    expect(content).toBe("1 bruh moments has occured today!")
  })
})
